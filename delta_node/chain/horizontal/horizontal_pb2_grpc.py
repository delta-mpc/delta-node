# type: ignore
# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import horizontal_pb2 as horizontal__pb2
from ..transaction import transaction_pb2 as transaction__pb2


class HorizontalStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateTask = channel.unary_unary(
                '/horizontal.Horizontal/CreateTask',
                request_serializer=horizontal__pb2.CreateTaskReq.SerializeToString,
                response_deserializer=horizontal__pb2.CreateTaskResp.FromString,
                )
        self.FinishTask = channel.unary_unary(
                '/horizontal.Horizontal/FinishTask',
                request_serializer=horizontal__pb2.FinishTaskReq.SerializeToString,
                response_deserializer=transaction__pb2.Transaction.FromString,
                )
        self.GetTask = channel.unary_unary(
                '/horizontal.Horizontal/GetTask',
                request_serializer=horizontal__pb2.TaskReq.SerializeToString,
                response_deserializer=horizontal__pb2.TaskResp.FromString,
                )
        self.StartRound = channel.unary_unary(
                '/horizontal.Horizontal/StartRound',
                request_serializer=horizontal__pb2.StartRoundReq.SerializeToString,
                response_deserializer=transaction__pb2.Transaction.FromString,
                )
        self.JoinRound = channel.unary_unary(
                '/horizontal.Horizontal/JoinRound',
                request_serializer=horizontal__pb2.JoinRoundReq.SerializeToString,
                response_deserializer=transaction__pb2.Transaction.FromString,
                )
        self.GetTaskRound = channel.unary_unary(
                '/horizontal.Horizontal/GetTaskRound',
                request_serializer=horizontal__pb2.TaskRoundReq.SerializeToString,
                response_deserializer=horizontal__pb2.TaskRoundResp.FromString,
                )
        self.SelectCandidates = channel.unary_unary(
                '/horizontal.Horizontal/SelectCandidates',
                request_serializer=horizontal__pb2.CandidatesReq.SerializeToString,
                response_deserializer=transaction__pb2.Transaction.FromString,
                )
        self.UploadSeedCommitment = channel.unary_unary(
                '/horizontal.Horizontal/UploadSeedCommitment',
                request_serializer=horizontal__pb2.ShareCommitment.SerializeToString,
                response_deserializer=transaction__pb2.Transaction.FromString,
                )
        self.UploadSecretKeyCommitment = channel.unary_unary(
                '/horizontal.Horizontal/UploadSecretKeyCommitment',
                request_serializer=horizontal__pb2.ShareCommitment.SerializeToString,
                response_deserializer=transaction__pb2.Transaction.FromString,
                )
        self.GetClientPublickKeys = channel.unary_unary(
                '/horizontal.Horizontal/GetClientPublickKeys',
                request_serializer=horizontal__pb2.PublicKeyReq.SerializeToString,
                response_deserializer=horizontal__pb2.PublicKeyResp.FromString,
                )
        self.StartCalculation = channel.unary_unary(
                '/horizontal.Horizontal/StartCalculation',
                request_serializer=horizontal__pb2.CalculationReq.SerializeToString,
                response_deserializer=transaction__pb2.Transaction.FromString,
                )
        self.UploadResultCommitment = channel.unary_unary(
                '/horizontal.Horizontal/UploadResultCommitment',
                request_serializer=horizontal__pb2.ResultCommitment.SerializeToString,
                response_deserializer=transaction__pb2.Transaction.FromString,
                )
        self.GetResultCommitment = channel.unary_unary(
                '/horizontal.Horizontal/GetResultCommitment',
                request_serializer=horizontal__pb2.ResultCommitmentReq.SerializeToString,
                response_deserializer=horizontal__pb2.ResultCommitmentResp.FromString,
                )
        self.StartAggregation = channel.unary_unary(
                '/horizontal.Horizontal/StartAggregation',
                request_serializer=horizontal__pb2.AggregationReq.SerializeToString,
                response_deserializer=transaction__pb2.Transaction.FromString,
                )
        self.UploadSeed = channel.unary_unary(
                '/horizontal.Horizontal/UploadSeed',
                request_serializer=horizontal__pb2.Share.SerializeToString,
                response_deserializer=transaction__pb2.Transaction.FromString,
                )
        self.UploadSecretKey = channel.unary_unary(
                '/horizontal.Horizontal/UploadSecretKey',
                request_serializer=horizontal__pb2.Share.SerializeToString,
                response_deserializer=transaction__pb2.Transaction.FromString,
                )
        self.GetSecretShareDatas = channel.unary_unary(
                '/horizontal.Horizontal/GetSecretShareDatas',
                request_serializer=horizontal__pb2.SecretShareReq.SerializeToString,
                response_deserializer=horizontal__pb2.SecretShareResp.FromString,
                )
        self.EndRound = channel.unary_unary(
                '/horizontal.Horizontal/EndRound',
                request_serializer=horizontal__pb2.EndRoundReq.SerializeToString,
                response_deserializer=transaction__pb2.Transaction.FromString,
                )


class HorizontalServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CreateTask(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FinishTask(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTask(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StartRound(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def JoinRound(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTaskRound(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SelectCandidates(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UploadSeedCommitment(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UploadSecretKeyCommitment(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetClientPublickKeys(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StartCalculation(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UploadResultCommitment(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetResultCommitment(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StartAggregation(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UploadSeed(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UploadSecretKey(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSecretShareDatas(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EndRound(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_HorizontalServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateTask': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateTask,
                    request_deserializer=horizontal__pb2.CreateTaskReq.FromString,
                    response_serializer=horizontal__pb2.CreateTaskResp.SerializeToString,
            ),
            'FinishTask': grpc.unary_unary_rpc_method_handler(
                    servicer.FinishTask,
                    request_deserializer=horizontal__pb2.FinishTaskReq.FromString,
                    response_serializer=transaction__pb2.Transaction.SerializeToString,
            ),
            'GetTask': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTask,
                    request_deserializer=horizontal__pb2.TaskReq.FromString,
                    response_serializer=horizontal__pb2.TaskResp.SerializeToString,
            ),
            'StartRound': grpc.unary_unary_rpc_method_handler(
                    servicer.StartRound,
                    request_deserializer=horizontal__pb2.StartRoundReq.FromString,
                    response_serializer=transaction__pb2.Transaction.SerializeToString,
            ),
            'JoinRound': grpc.unary_unary_rpc_method_handler(
                    servicer.JoinRound,
                    request_deserializer=horizontal__pb2.JoinRoundReq.FromString,
                    response_serializer=transaction__pb2.Transaction.SerializeToString,
            ),
            'GetTaskRound': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTaskRound,
                    request_deserializer=horizontal__pb2.TaskRoundReq.FromString,
                    response_serializer=horizontal__pb2.TaskRoundResp.SerializeToString,
            ),
            'SelectCandidates': grpc.unary_unary_rpc_method_handler(
                    servicer.SelectCandidates,
                    request_deserializer=horizontal__pb2.CandidatesReq.FromString,
                    response_serializer=transaction__pb2.Transaction.SerializeToString,
            ),
            'UploadSeedCommitment': grpc.unary_unary_rpc_method_handler(
                    servicer.UploadSeedCommitment,
                    request_deserializer=horizontal__pb2.ShareCommitment.FromString,
                    response_serializer=transaction__pb2.Transaction.SerializeToString,
            ),
            'UploadSecretKeyCommitment': grpc.unary_unary_rpc_method_handler(
                    servicer.UploadSecretKeyCommitment,
                    request_deserializer=horizontal__pb2.ShareCommitment.FromString,
                    response_serializer=transaction__pb2.Transaction.SerializeToString,
            ),
            'GetClientPublickKeys': grpc.unary_unary_rpc_method_handler(
                    servicer.GetClientPublickKeys,
                    request_deserializer=horizontal__pb2.PublicKeyReq.FromString,
                    response_serializer=horizontal__pb2.PublicKeyResp.SerializeToString,
            ),
            'StartCalculation': grpc.unary_unary_rpc_method_handler(
                    servicer.StartCalculation,
                    request_deserializer=horizontal__pb2.CalculationReq.FromString,
                    response_serializer=transaction__pb2.Transaction.SerializeToString,
            ),
            'UploadResultCommitment': grpc.unary_unary_rpc_method_handler(
                    servicer.UploadResultCommitment,
                    request_deserializer=horizontal__pb2.ResultCommitment.FromString,
                    response_serializer=transaction__pb2.Transaction.SerializeToString,
            ),
            'GetResultCommitment': grpc.unary_unary_rpc_method_handler(
                    servicer.GetResultCommitment,
                    request_deserializer=horizontal__pb2.ResultCommitmentReq.FromString,
                    response_serializer=horizontal__pb2.ResultCommitmentResp.SerializeToString,
            ),
            'StartAggregation': grpc.unary_unary_rpc_method_handler(
                    servicer.StartAggregation,
                    request_deserializer=horizontal__pb2.AggregationReq.FromString,
                    response_serializer=transaction__pb2.Transaction.SerializeToString,
            ),
            'UploadSeed': grpc.unary_unary_rpc_method_handler(
                    servicer.UploadSeed,
                    request_deserializer=horizontal__pb2.Share.FromString,
                    response_serializer=transaction__pb2.Transaction.SerializeToString,
            ),
            'UploadSecretKey': grpc.unary_unary_rpc_method_handler(
                    servicer.UploadSecretKey,
                    request_deserializer=horizontal__pb2.Share.FromString,
                    response_serializer=transaction__pb2.Transaction.SerializeToString,
            ),
            'GetSecretShareDatas': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSecretShareDatas,
                    request_deserializer=horizontal__pb2.SecretShareReq.FromString,
                    response_serializer=horizontal__pb2.SecretShareResp.SerializeToString,
            ),
            'EndRound': grpc.unary_unary_rpc_method_handler(
                    servicer.EndRound,
                    request_deserializer=horizontal__pb2.EndRoundReq.FromString,
                    response_serializer=transaction__pb2.Transaction.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'horizontal.Horizontal', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Horizontal(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CreateTask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/horizontal.Horizontal/CreateTask',
            horizontal__pb2.CreateTaskReq.SerializeToString,
            horizontal__pb2.CreateTaskResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FinishTask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/horizontal.Horizontal/FinishTask',
            horizontal__pb2.FinishTaskReq.SerializeToString,
            transaction__pb2.Transaction.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetTask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/horizontal.Horizontal/GetTask',
            horizontal__pb2.TaskReq.SerializeToString,
            horizontal__pb2.TaskResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StartRound(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/horizontal.Horizontal/StartRound',
            horizontal__pb2.StartRoundReq.SerializeToString,
            transaction__pb2.Transaction.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def JoinRound(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/horizontal.Horizontal/JoinRound',
            horizontal__pb2.JoinRoundReq.SerializeToString,
            transaction__pb2.Transaction.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetTaskRound(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/horizontal.Horizontal/GetTaskRound',
            horizontal__pb2.TaskRoundReq.SerializeToString,
            horizontal__pb2.TaskRoundResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SelectCandidates(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/horizontal.Horizontal/SelectCandidates',
            horizontal__pb2.CandidatesReq.SerializeToString,
            transaction__pb2.Transaction.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UploadSeedCommitment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/horizontal.Horizontal/UploadSeedCommitment',
            horizontal__pb2.ShareCommitment.SerializeToString,
            transaction__pb2.Transaction.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UploadSecretKeyCommitment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/horizontal.Horizontal/UploadSecretKeyCommitment',
            horizontal__pb2.ShareCommitment.SerializeToString,
            transaction__pb2.Transaction.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetClientPublickKeys(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/horizontal.Horizontal/GetClientPublickKeys',
            horizontal__pb2.PublicKeyReq.SerializeToString,
            horizontal__pb2.PublicKeyResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StartCalculation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/horizontal.Horizontal/StartCalculation',
            horizontal__pb2.CalculationReq.SerializeToString,
            transaction__pb2.Transaction.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UploadResultCommitment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/horizontal.Horizontal/UploadResultCommitment',
            horizontal__pb2.ResultCommitment.SerializeToString,
            transaction__pb2.Transaction.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetResultCommitment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/horizontal.Horizontal/GetResultCommitment',
            horizontal__pb2.ResultCommitmentReq.SerializeToString,
            horizontal__pb2.ResultCommitmentResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StartAggregation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/horizontal.Horizontal/StartAggregation',
            horizontal__pb2.AggregationReq.SerializeToString,
            transaction__pb2.Transaction.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UploadSeed(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/horizontal.Horizontal/UploadSeed',
            horizontal__pb2.Share.SerializeToString,
            transaction__pb2.Transaction.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UploadSecretKey(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/horizontal.Horizontal/UploadSecretKey',
            horizontal__pb2.Share.SerializeToString,
            transaction__pb2.Transaction.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetSecretShareDatas(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/horizontal.Horizontal/GetSecretShareDatas',
            horizontal__pb2.SecretShareReq.SerializeToString,
            horizontal__pb2.SecretShareResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def EndRound(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/horizontal.Horizontal/EndRound',
            horizontal__pb2.EndRoundReq.SerializeToString,
            transaction__pb2.Transaction.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
